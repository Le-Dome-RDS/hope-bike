
# 1 "Bio-NetApp.c"

# 4 "/Applications/microchip/xc8/v1.38/include/__size_t.h"
typedef unsigned size_t;

# 7 "/Applications/microchip/xc8/v1.38/include/stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "/Applications/microchip/xc8/v1.38/include/stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "/Applications/microchip/xc8/v1.38/include/errno.h"
extern int errno;

# 12 "/Applications/microchip/xc8/v1.38/include/conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "/Applications/microchip/xc8/v1.38/include/stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 7 "/Applications/microchip/xc8/v1.38/include/stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "/Applications/microchip/xc8/v1.38/include/xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "/Applications/microchip/xc8/v1.38/include/stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 15 "Type.h"
typedef unsigned long u32;
typedef unsigned int u16;
typedef int s16;
typedef unsigned char u8;
typedef char s8;
typedef unsigned char boolean;

# 43 "Bio-NetApp.h"
typedef struct VarConfDesc{
u8 u8VarRef;
u8 u8VarCycle;
u8 u8VarTypeSize;
};

typedef struct BioNetConf{
struct VarConfDesc sVarConfDesc[4];
u8 u8VarNumber;
};

enum BioNetStatus {
INIT,
RUN,
STOP,
ERROR
};

extern const struct BioNetConf sBioNetConf;
extern enum BioNetStatus eBioNetStatus;
extern u8 tu8BioNetBuff[];

boolean IsOk_CallBackRead(u8 u8VarNumber, u8* pu8Buffer);
boolean IsOk_CallBackWrite(u8 u8VarNumber, u8* pu8Buffer);

# 16 "DC22M_GlobalVar.h"
extern u8 Tempo500ms;

extern u8 u8Pedalage;
extern u8 u8PedalageCpt;
extern boolean bPedalageLevelPrev;

extern u8 u8RPM;
extern u8 u8RPMCpt;
extern boolean bRPMLevelPrev;


extern u16 u16TensionBatterie;
extern u16 u16CourantBatt;

# 20 "Bio-NetApp.c"
const struct BioNetConf sBioNetConf = {
2,255,2+0x10,
7,255,1+0x10,
8,5,1+0x10,
15,255,2+0x10,
4};

enum BioNetStatus eBioNetStatus= INIT;

# 38
boolean IsOk_CallBackRead(u8 u8VarRef, u8* pu8Buffer)
{
boolean Result=1;

if (u8VarRef == 2)
{

*(u16 *)pu8Buffer = u16CourantBatt;
}
else if (u8VarRef == 7)
{

*pu8Buffer = u8Pedalage;
}
else if (u8VarRef == 8)
{

*pu8Buffer = u8RPM;
}
else if (u8VarRef == 15)
{

*(u16 *)pu8Buffer = u16TensionBatterie;
}
else
{

Result=0;
}


return (Result);
};

# 80
boolean IsOk_CallBackWrite(u8 u8VarRef, u8* pu8Buffer)
{
boolean Result=1;


Result=0;

return (Result);
};
